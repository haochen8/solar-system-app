/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package assignment4;

import assignment4.solarsystem.Moon;
import assignment4.solarsystem.Planet;
import assignment4.solarsystem.SolarSystem;
import assignment4.solarsystem.Star;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

/**
 * This is the generated Hello World Greeting App.
 */
public class App {

  private static SolarSystem solarSystem = new SolarSystem();
  private static SolarSystemFileHandler fileHandler = new SolarSystemFileHandler();
  private static Scanner scanner = new Scanner(System.in, StandardCharsets.UTF_8.name());

  /**
   * The App starting point.
   *
   * @param args Unused program arguments.
   */
  public static void main(String[] args) {

    fileHandler.readFromFile("solarsystems.data", solarSystem);

    boolean running = true;
    while (running) {
      System.out.println("\n--- Solar System Management ---");
      System.out.println("1. List Solar Systems");
      System.out.println("2. Add a Star");
      System.out.println("3. Add a Planet to a Star");
      System.out.println("4. Add a Moon to a Planet");
      System.out.println("5. Delete a Star");
      System.out.println("6. Delete a Planet");
      System.out.println("7. Delete a Moon");
      System.out.println("8. Exit");

      System.out.print("Enter choice: ");
      int choice = scanner.nextInt();
      scanner.nextLine();  // Consume newline

      switch (choice) {
        case 1:
          listSolarSystems();
          break;
        case 2:
          addStar();
          break;
        case 3:
          addPlanet();
          break;
        case 4:
          addMoon();
          break;
        case 5:
          deleteStar();
          break;
        case 6:
          deletePlanet();
          break;
        case 7:
          deleteMoon();
          break;
        case 8:
          fileHandler.writeToFile("solarsystems.data", solarSystem);  // Save data
          running = false;
          break;
        default:
          System.out.println("Invalid option.");
      }
    }
    scanner.close();
  }
  
  private static void listSolarSystems() {
    System.out.println(solarSystem.listHeavenlyBodies());
  }

  private static void addStar() {
    while (true) {
      System.out.print("Enter star name (or type 'exit' to return to menu): ");
      String name = readString();
      if ("exit".equalsIgnoreCase(name)) {
        return;
      }
        
      double radius = readDouble("Enter star radius (km) or 'exit' to return to menu: ");
      if (radius == Double.MIN_VALUE) {
        return;  // User chose to exit
      }

      try {
        Star star = new Star(name, radius);
        solarSystem.addStar(star);
        System.out.println("Star added successfully.");
        break;  // Break after successful addition
      } catch (IllegalArgumentException e) {
        System.out.println("Error adding star: " + e.getMessage() + " Please try again.");
      }
    }
  }

  private static void addPlanet() {
    while (true) {
      System.out.print("Enter star name to add planet to (or type 'exit' to return to menu): ");
      String starName = readString();
      if ("exit".equalsIgnoreCase(starName)) {
        return;
      }

      Star star = solarSystem.getStars().stream()
                               .filter(s -> s.getName().equalsIgnoreCase(starName))
                               .findFirst()
                               .orElse(null);
      if (star == null) {
        System.out.println("Star not found. Please try again.");
        continue;
      }

      System.out.print("Enter planet name: ");
      String name = readString();
      if ("exit".equalsIgnoreCase(name)) {
        return;
      }

      System.out.print("Enter planet radius (km): ");
      int radius = readInt("Enter planet radius (km) or 'exit' to return to menu: ");
      if (radius == Integer.MIN_VALUE) {
        return;  // User chose to exit
      }

      double orbitRadius = readDouble("Enter orbit radius from star (km) or 'exit' to return to menu: ");
      if (orbitRadius == Double.MIN_VALUE) {
        return;  // User chose to exit
      }

      try {
        star.addPlanet(name, radius, orbitRadius);
        System.out.println("Planet added successfully.");
        break;  // Exit after successful addition
      } catch (IllegalArgumentException e) {
        System.out.println("Error adding planet: " + e.getMessage() + " Please try again.");
      }
    }
  }

  private static void addMoon() {
    while (true) {
      System.out.print("Enter star name to add moon to (or type 'exit' to return to menu): ");
      String starName = readString();
      if ("exit".equalsIgnoreCase(starName)) {
        return;
      }

      Star star = solarSystem.getStars().stream()
                               .filter(s -> s.getName().equalsIgnoreCase(starName))
                               .findFirst()
                               .orElse(null);
      if (star == null) {
        System.out.println("Star not found. Please try again.");
        continue;
      }

      System.out.print("Enter planet name to add moon to: ");
      String planetName = readString();
      if ("exit".equalsIgnoreCase(planetName)) {
        return;
      }

      Planet planet = star.getPlanets().stream()
                          .filter(p -> p.getName().equalsIgnoreCase(planetName))
                          .findFirst()
                          .orElse(null);
      if (planet == null) {
        System.out.println("Planet not found. Please try again.");
        continue;
      }

      System.out.print("Enter moon name: ");
      String name = readString();
      if ("exit".equalsIgnoreCase(name)) {
        return;
      }

      System.out.print("Enter moon radius (km): ");
      int radius = readInt("Enter moon radius (km) or 'exit' to return to menu: ");
      if (radius == Integer.MIN_VALUE) {
        return;  // User chose to exit
      }

      double orbitRadius = readDouble("Enter orbit radius from planet (km) or 'exit' to return to menu: ");
      if (orbitRadius == Double.MIN_VALUE) {
        return;  // User chose to exit
      }

      try {
        planet.addMoon(name, radius, orbitRadius);
        System.out.println("Moon added successfully.");
        break;  // Exit after successful addition
      } catch (IllegalArgumentException e) {
        System.out.println("Error adding moon: " + e.getMessage() + " Please try again.");
      }
    }
  }

  private static void deleteStar() {
    System.out.print("Enter star name to delete: ");
    String name = readString();
    Star star = solarSystem.getStars().stream()
            .filter(s -> s.getName().equals(name))
            .findFirst()
            .orElse(null);

    if (star != null) {
      solarSystem.removeStar(star);
    } else {
      System.out.println("Star not found.");
    }
  }

  private static void deletePlanet() {
    System.out.print("Enter planet name to delete: ");
    String name = readString();
    Planet planet = solarSystem.getStars().stream()
            .flatMap(star -> star.getPlanets().stream())
            .filter(p -> p.getName().equals(name))
            .findFirst()
            .orElse(null);

    if (planet != null) {
      solarSystem.getStars().stream()
                .filter(star -> star.getPlanets().contains(planet))
                .findFirst()
                .ifPresent(star -> star.removePlanet(planet));
    } else {
      System.out.println("Planet not found.");
    }
  }

  private static void deleteMoon() {
    System.out.print("Enter moon name to delete: ");
    String name = readString();
    Moon moon = solarSystem.getStars().stream()
            .flatMap(star -> star.getPlanets().stream())
            .flatMap(planet -> planet.getMoons().stream())
            .filter(m -> m.getName().equals(name))
            .findFirst()
            .orElse(null);

    if (moon != null) {
      solarSystem.getStars().stream()
                .flatMap(star -> star.getPlanets().stream())
                .filter(planet -> planet.getMoons().contains(moon))
                .findFirst()
                .ifPresent(planet -> planet.removeMoon(moon));
    } else {
      System.out.println("Moon not found.");
    }
  }

  private static String readString() {
    return scanner.nextLine().trim();
  }

  private static double readDouble(String prompt) {
    double value;
    while (true) {
      System.out.print(prompt);
      if (scanner.hasNextDouble()) {
        value = scanner.nextDouble();
        scanner.nextLine();
        return value;
      } else {
        String input = scanner.next();
        scanner.nextLine();
        if (input.equalsIgnoreCase("exit")) {
          return Double.MIN_VALUE;
        }
        System.out.println("Invalid input. Please enter a double or type 'exit' to return to menu.");
      }
    }
  }

  private static int readInt(String prompt) {
    int value;
    while (true) {
      System.out.print(prompt);
      if (scanner.hasNextInt()) {
        value = scanner.nextInt();
        scanner.nextLine();
        return value;
      } else {
        String input = scanner.next();
        scanner.nextLine();
        if (input.equalsIgnoreCase("exit")) {
          return Integer.MIN_VALUE;
        }
        System.out.println("Invalid input. Please enter an integer or type 'exit' to return to menu.");
      }
    }
  }
  
}
